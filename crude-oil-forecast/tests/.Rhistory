life_table <- lifecontingencies::lifetable(x = ages, lx = lx)
# Create a life table
showClass('lifetable')
lx <- am92_data[[2]]  # lx values are in the second column
ages <- am92_data[[1]]  # ages are in the first column
life_table <- lifecontingencies::lifetable(x = ages, lx = lx)
showClass("actuarialtable")
lx <- am92_data[[2]]  # lx values are in the second column
ages <- am92_data[[1]]  # ages are in the first column
life_table <- lifecontingencies::lifetable(x = ages, lx = lx)
# Load the data
am92_data <- readxl::read_excel("D:/DEV WORK/R library/am92.xls")
# Create a life table
showClass('lifetable')
showClass("actuarialtable")
lx <- am92_data[[2]]  # lx values are in the second column
ages <- am92_data[[1]]  # ages are in the first column
life_table <- actauarialtable(x)
life_table <- lifecontingencies::lifetable(x = ages, lx = lx)
# Calculate death probabilities
qx <- diff(c(am92_data[[2]], 0)) / am92_data[[2]]
# Load required libraries
library(lifecontingencies)
library(readxl)
# Load the data
am92_data <- readxl::read_excel("D:/DEV WORK/R library/am92.xls")
# Calculate death probabilities
qx <- diff(c(am92_data[[2]], 0)) / am92_data[[2]]
# Create a life table
life_table <- lifecontingencies::lx(qx)
# Define the function to calculate the reserve for a whole life policy
calculate_reserve_whole_life <- function(life_table, x, t, i) {
# Calculate the present value of future benefits
pv_benefits <- lifecontingencies::Axn(life_table, x + t, i)
# Calculate the present value of future premiums
pv_premiums <- lifecontingencies::AExn(life_table, x, t, i)
# The reserve is the present value of future benefits minus the present value of future premiums
reserve <- pv_benefits - pv_premiums
return(reserve)
}
# Test the function
x <- 60  # Age at the start of the policy
t <- 20  # Number of years into the policy
i <- 0.04  # Interest rate
reserve <- calculate_reserve_whole_life(life_table, x, t, i)
# Load required libraries
library(lifecontingencies)
library(readxl)
# Load the data
am92_data <- readxl::read_excel("D:/DEV WORK/R library/am92.xls")
# Calculate death probabilities
qx <- diff(c(am92_data[[2]], 0)) / am92_data[[2]]
# Load the data
am92_data <- readxl::read_excel("D:/DEV WORK/R library/am92.xls")
# Convert lx values to numeric
lx <- as.numeric(am92_data[[2]])
# Load required libraries
library(lifecontingencies)
library(readxl)
# Load the data
am92_data <- readxl::read_excel("D:/DEV WORK/R library/am92.xls")
# Convert lx values to numeric
lx <- as.numeric(am92_data[[2]])
# Load the data starting from row 5
am92_data <- readxl::read_excel("D:/DEV WORK/R library/am92.xls", skip = 4)
# Convert lx values to numeric
lx <- as.numeric(am92_data[[2]])
# Calculate death probabilities
qx <- diff(c(lx, 0)) / lx
# Create a life table
life_table <- lifecontingencies::lx(qx)
# Create a life table
life_table <- lifecontingencies::actuarialtable(list(x = am92_data[[1]], qx = qx))
# Calculate death probabilities
qx <- diff(c(lx, 0)) / lx
# Create a life table
life_table <- lifecontingencies::actuarialtable(list(x = am92_data[[1]], qx = qx))
# Print the life table
print(life_table)
library(lifecontingencies);library(moments);library(tseries);library(readxl)
library(lifecontingencies);library(moments);library(tseries);library(readxl)
library(readxl)
View(am92durn2)
library(lifecontingencies);library(moments);library(tseries);library(readxl)
library(readxl)
am92durn2 <- read.csv("D:/DEV WORK/R library/am92durn")
am92durn2 <- read.csv("D:/DEV WORK/R library/am92durn.csv")
am92durn2 <- read.csv("D:/DEV WORK/R library/am92durn2.csv")
View(am92durn2)
am92_entire<-am92durn2
am92<-am92_entire[,c(1,2)]
am92_lt<-new("lifetable",  x=am92[,1],lx=am92[,2],name=" am92 males")
am92_at <- new("actuarialtable",x=am92_lt@x, lx=am92_lt@lx,  interest=0.04, name="am92")
Axn(am92_at, 60, i = 0.04, type = "EV", power = 2)
Axn(am92_at, 60, i = 1.04^2-1, power = 1)
(VarAxn<-(Axn(am92_at, 60, i = 0.04, type = "EV", power = 2)
-(Axn(am92_at, 60, i = 0.04, type = "EV", power = 1))^2))
#variance function for whole life
var_whole<-function(tablex,age,interestx)
{Axn(tablex, age, i = interestx, type = "EV", power = 2)-
(Axn(tablex, age, i = interestx, type = "EV", power = 1))^2}
var_whole(am92_at,60,0.04)       #example
#variance function for term assurance
var_term<-function(tablex,agex,termx,interestx)
{Axn(tablex, x = agex,n=termx, i = interestx, type = "EV", power = 2)-
(Axn(tablex, x = agex,n=termx, i = interestx, type = "EV", power = 1))^2}
var_term(am92_at,60,10,0.04)     #example
#variance function for endowment - cchecked - see below
#var_endw<-function(tablex,age,interestx,termx){
var_endw<-function(tablex,age,termx,interestx){
AExn(tablex, age, i = interestx, n=termx, type = "EV", power = 2)-
(AExn(tablex, age, i = interestx, n=termx, type = "EV", power = 1))^2}
var_endw(am92_at,60,10,0.04)     #example
#Exm 1
vb<-60   #length of vector
age_stx<-60
prob_death_each_year<-(am92_at@lx[(age_stx-16):((age_stx-16)+vb-1)]-
am92_at@lx[(age_stx-15):((age_stx-15)+vb-1)])/am92_at@lx[(age_stx-16)]   #use new function here???
disc_y<-1/(1.04^(1:vb))
EX<-sum(prob_death_each_year*disc_y)
sum(prob_death_each_year*(disc_y-EX)^2)   #agrees
(meanAxn<-Axn(am92_at, 60, i = 0.04, type = "EV", power = 1))
(meanAxn_term<-Axn(am92_at, 60, 10, i = 0.04, type = "EV", power = 1))
#  prob a life aged x dies in a future year
fx_fn1<-function(x0,range_x){(am92_at@lx[(x0-16):((x0-16)+range_x-1)]-
am92_at@lx[(x0-15):((x0-15)+range_x-1)])/am92_at@lx[(x0-16)]}
#  table of q rates
qx_rates1<-function(x0,range_x)(am92_at@lx[(x0-16):((x0-16)+range_x-1)]-
am92_at@lx[(x0-15):((x0-15)+range_x-1)])/am92_at@lx[(x0-16):((x0-16)+range_x-1)]
#  surviving from age x to various future ages
surv_fn1<-function(x0,range_x){am92_at@lx[(x0-15):((x0-15)+range_x-1)]/
am92_at@lx[(x0-16)] }
fx_fn1(60,5)
qx_rates1(60,5)
surv_fn1(60,5)
# e.g. checking the whole life and term assurance figures above:
sum(fx_fn1(60,60)/1.04^(1:60));     sum(fx_fn1(60,10)/1.04^(1:10))
#see Fig 1 below
start_age<-60;        rangez<-60
pv_whole<-1/(1.04^(1:rangez))   #pv of benefit in each year, at start of contract
prob_death_fut_yr<-fx_fn1(start_age,rangez)
var_ann<-function(tablex,age,intx)
{(Axn(tablex, age, i = intx, type = "EV", power = 2)-
Axn(tablex, age, i = intx, type = "EV", power = 1)^2)/(intx/(1+intx))^2}
var_ann(am92_at,60,0.04)^0.5       #example
set.seed(1000);     sims<-10000
randomwholelife<-rLifeContingencies(sims,"Axn",am92_at,60,999,parallel=FALSE)
mean(randomwholelife);     var(randomwholelife);     var(randomwholelife)^0.5
meanAxn+qnorm(.99,0,1)*VarAxn^0.5  #Normal approx
quantile(randomwholelife,0.99)     #simulations
#Term assurance
sims<-10000;   set.seed(1000);   term_ins<-10;
random_1policies_t<- rLifeContingencies(sims,"Axn",am92_at,i=0.04,60,t=term_ins)
mean(random_1policies_t);    var(random_1policies_t);    var(random_1policies_t)^0.5
#Exm 2
set.seed(100);       sim_no<-10000
abc<-runif(sim_no)
pv_wholeyy<-cdf_whole<-NULL
cdf_whole<-c(0,1-surv_fn1(60,60))   #this is F(x)
for (nnn in 1:sim_no) {
pv_wholeyy[nnn]<- pv_whole[max(which(cdf_whole<=abc[nnn]))]}
mean(pv_wholeyy);   var(pv_wholeyy)^0.5
head(pv_wholeyy,10)
#for Fig 1 right (Term Assurance)
sims<-10000;   set.seed(7000);   term_ins<-10;
random_1policies_t<- rLifeContingencies(sims,"Axn",am92_at,i=0.04,60,t=term_ins)
mean(random_1policies_t);    var(random_1policies_t);    var(random_1policies_t)^0.5
head(random_1policies_t,20)
hist(randomwholelife,main="Whole life policy",xlab="Present value",freq=TRUE,breaks = 100)   #whole
lines(pv_whole,sims*prob_death_fut_yr,main="PV of benefits - whole life - not simulations",xlab="Present Value",ylab="Probability")
points(pv_whole,sims*prob_death_fut_yr,main="PV of benefits - whole life - not simulations",xlab="Present Value",ylab="Probability",pch=19)
hist(random_1policies_t,main="Term assurance policy (10 year)",xlab="Present value",freq=TRUE)    #term
random_100policies<-totalyyyy<-NULL;   set.seed(600)
sims<-10000;    policies<-100
rand_wh<-matrix(rLifeContingencies(policies*sims,"Axn",am92_at,x=60,t=80),sims,policies)
mean(random_100policies)
var(random_100policies);  sd(random_100policies)
hist(term100_sims,main="100 policies: 10-year Term Assurance",xlab="Present value")
abline(v=quantile(term100_sims,VaRxxx),lty=1,lwd=3)
abline(v=sdnorm_port,lty=3,lwd=1)
text(18.5, 1000, "VaR",cex=1.2)
skewness(randomwholelife);      skewness(random_100policies)   #whole life
#Section 5
set.seed(5000);    age_annz<-60;    sims_ann<-10000
sampleaxn <- rLifeContingencies(sims_ann, "axn", am92_at,x=age_annz)  # simulations
mean(sampleaxn); sd(sampleaxn)                                   # simulations
axn(am92_at,age_annz); var_ann(am92_at,age_annz,0.04)^0.5        # theory
#100 policies in portfolio - simulations
rand_100_ann_policies<-NULL;   set.seed(10000)
sims<-1000;    policies<-100
rand_annx<-matrix(rLifeContingencies(policies*sims,"axn",am92_at,x=60),sims,policies)
rand_100_ann_policies<-apply(rand_annx,1,sum)
mean(rand_100_ann_policies)
var(rand_100_ann_policies);  sd(rand_100_ann_policies)
start_age<-age_annz
vb<-60
prob_death_fut_yr<-NULL
prob_death_fut_yr<-(am92_at@lx[(start_age-16):((start_age-16)+vb-1)]-
am92_at@lx[(start_age-15):((start_age-15)+vb-1)])/am92_at@lx[(start_age-16)]
pv_ann<- (1-(1.04^-(1:vb)) )/0.04*1.04  #payable in advance - consistent
hist(sampleaxn,xlab="Present value",breaks=100,freq=TRUE,main="Single policy")
points(pv_ann,sims_ann*prob_death_fut_yr)  #exact - gives similar plot to histogram of simulations of single policy
hist(rand_100_ann_policies,main="Portfolio: 100 annuity policies",xlab="Present value")
#alternative mean calculation - good check
sum(prob_death_fut_yr*pv_ann)
(sum(prob_death_fut_yr*pv_ann^2)-(sum(prob_death_fut_yr*pv_ann))^2)^0.5
(premium_whole_gross<-(100500*Axn(am92_at, 40)+200)/(0.95*axn(am92_at, 40)))
#Exm5
(premium_whole<-100000*Axn(am92_at, 40)/axn(am92_at, 40))
start_age<-60;    range_z<-120-start_age;   ben_wh1<-10000
(premium_whl<-ben_wh1*Axn(am92_at, start_age)/axn(am92_at, start_age)) #prem payable
pv_ben_whole<-ben_wh1/(1.04^(1:range_z))     #pv benefit in each year, at t=0
prem_pv_wh<-premium_whl*(1-1.04^-(1:range_z))/0.04*1.04   #pv of prems
profit_whole<-prem_pv_wh-pv_ben_whole        #resulting profit from death each year
prob_death_fut_yr<-fx_fn1(60,60)             # prob of life dying in a future year
year_of_deathyt<-1:range_z
head(cbind(year_of_deathyt,prob_death_fut_yr,pv_ben_whole,prem_pv_wh),3)
(whole_sd_single_profit<-sum(profit_whole^2*prob_death_fut_yr)^.5) #sd of profit
cor(pv_ben_whole,prem_pv_wh)
#Fig 4
plot(profit_whole,prob_death_fut_yr,main="Probability distribution: PV of profits (not simulations)",xlab="Profit",ylab="Probability",cex.lab=1.5)
plot(start_age:(start_age+range_z-1),profit_whole,main="PV of profit as a function of age at death",ylab="Present vlaue of profit",xlab="Age of policyholder death")
points(80:(start_age+range_z-1),profit_whole[21:60],pch=20) #from age 80
(sd_theory<-(var_whole(am92_at,60,0.04)*(premium_whl*1.04/0.04+10000)^2)^0.5)
#Exm 6
set.seed(100);
sim_no<-100000
sim_profit_whole<-termx<-cdf_whole<-NULL
cdf_whole<-c(0,1-surv_fn1(60,59))
for (nnn in 1:sim_no) {
sim_profit_whole[nnn]<- profit_whole[max(which(cdf_whole<=ddd[nnn]))]
}
var(sim_profit_whole)^0.5           #sd from sims
quantile(sim_profit_whole,0.01); qnorm(0.01)*sd_qqq_theory #99%VaR sims vs Normal approx
set.seed(10000)
no_polxz<-100  #no of policies
sim_toplevel<-10000 #no of simulations
ddd<-sim_profit_whole100<-book_profit_whole100<-NULL
for (vvv in 1:sim_toplevel) {
ddd<-runif(no_polxz)
for (nnn in 1:no_polxz) {
sim_profit_whole100[nnn]<- profit_whole[max(which(cdf_whole<=ddd[nnn]))]
}
book_profit_whole100[vvv]<-sum(sim_profit_whole100)}
var(book_profit_whole100)^0.5   # sd of profits - simulations (100 policies)
100^0.5*sd_theory           # sd of profits - theoretical (100 policies)
quantile(book_profit_whole100,0.01); qnorm(0.01)*10*sd_theory  #VaR: sims vs Normal approx
#Exc18
set.seed(1000)
prem_ex<-premium_whl
prem_ex<-361    #358#362  #try various values here - this value gives approx 5%
profit_ex<-prem_ex*(1-1.04^-(1:range_z))/0.04*1.04-ben_wh1/(1.04^(1:range_z))
rand_normx<-prof_wh100_sim<-tot_prof_wh100_sim<-NULL
sim_toplevel
for (vvv in 1:sim_toplevel) {
rand_normx<-runif(no_polxz) #moved to this line as done in previous code
for (nnn in 1:no_polxz) {
prof_wh100_sim[nnn]<- profit_ex[max(which(cdf_whole<=rand_normx[nnn]))]
}
tot_prof_wh100_sim[vvv]<-sum(prof_wh100_sim)}
mean(tot_prof_wh100_sim)
quantile(tot_prof_wh100_sim,seq(0.01,0.06,0.01))   #99% to 95% VaR
#Fig 5
hist(book_profit_whole100,main="Profit - 100 whole life policies",xlab="Portfolio profit")
hist(tot_prof_wh100_sim,main="Premium with less than 5% chance of loss - 100 whole life policies",xlab="Portfolio profit")
abline(v=0,lty=3)
#Ex21
benefit_tm6<-10000
age_stx<-60
premium_term<-benefit_tm6*Axn(am92_at, 60,10)/axn(am92_at, 60,10)
prob_death_fut_yr_term<-c(fx_fn1(60,10),surv_fn1(60,10)[10])
vb<-10
profqqq_term<-c(premium_term*(1-1.04^-(1:vb))/0.04*1.04-benefit_tm6/1.04^(1:vb),premium_term*(1-1.04^-vb)/0.04*1.04)#better
profqqq_term
term_sd_single_profit<-sum(profqqq_term^2*prob_death_fut_yr_term)^.5
term_sd_single_profit
#Fig 6
plot(profqqq_term,prob_death_fut_yr_term,main="Probability distribution of PV of profit from one term assurance policy",xlab="Profit",ylab="Probability")
plot(60:70,profqqq_term,xlab="Age at death of policyholder",main="Profit from policy as a function of age at death",ylab="Profit")
#Exc22
set.seed(30000)
sim_toplevel<-10000 #no of simulations
cdf_term<-NULL
(cdf_term<-c(0,cumsum(prob_death_fut_yr_term)))   #or...
(cdf_term<-c(0,1-surv_fn1(60,10),1))
no_policies<-100 #no of policies
dfg100<-NULL
term_port<-NULL
for (vvv in 1:sim_toplevel) {
rand_normx<-runif(no_policies)
for (nnn in 1:no_policies) {
dfg100[nnn]<- profqqq_term[max(which(cdf_term<=rand_normx[nnn]))]
}
term_port[vvv]<-sum(dfg100)
}
var(term_port)^0.5;
term_sd_single_profit*10       # sd from sims, theory
quantile(term_port,0.01);   qnorm(0.01)*(10*term_sd_single_profit) ##99% from sims, and Normal approx
#Fig7
hist(term_port,main="100 policies- 10 year term assurance")
#1
no_pol_q<-100  #no of policies - lives die at random times
sim_toplevel<-1000
mort_adjxxx<-  (0.1)  #eg healthcare crisis
vb<-60
am92_entire<-read.csv("~am92_durn2.csv")
library(lifecontingencies);library(moments);library(tseries);library(readxl)
library(readxl)
am92durn2 <- read.csv("D:/DEV WORK/R library/am92durn2.csv")
View(am92durn2)
am92_entire<-am92durn2
am92<-am92_entire[,c(1,2)]
am92_lt<-new("lifetable",  x=am92[,1],lx=am92[,2],name=" am92 males")
am92_at <- new("actuarialtable",x=am92_lt@x, lx=am92_lt@lx,  interest=0.04, name="am92")
reserve_whole<-NULL
reserve_whole<-function(x,t){Axn(am92_at, x+t)-Axn(am92_at, x)/axn(am92_at, x)*axn(am92_at, x+t)}
xz<-reserve_whole(60,seq(1,55))    #plotted
reserve_end_ass<-NULL
reserve_end_ass<-function(x,t,n){AExn(am92_at, x+t,n-t)-AExn(am92_at, x,n)/axn(am92_at, x,n)*axn(am92_at, x+t,n-t)}
endow_res<-NULL
for(ww in 1:11){endow_res[ww]<-reserve_end_ass(60,ww-1,10)}
premium_term<-Axn(am92_at, 60,10)/axn(am92_at, 60,10)
reserve_term_ass<-function(x,t,n){Axn(am92_at, x+t,n-t)-premium_term*axn(am92_at, x+t,n-t)}
xzzz<-reserve_term_ass(60,seq(0,10),10)
# Plot reserves over time
plot(seq(1,55),xz,xlab="term",ylab="reserve",main="Whole life assurance")
plot(seq(0,10),endow_res,xlab="term",ylab="reserve",main="Endowment assurance")
plot(seq(0,10),xzzz,xlab="term",ylab="reserve",main="10 year term assurance")
# Load the required libraries
library(lifecontingencies)
library(moments)
library(tseries)
library(readxl)
# Read the AM92 mortality table from a CSV file
am92durn2 <- read.csv("D:/DEV WORK/R library/am92durn2.csv")
# View the data (only works in RStudio)
View(am92durn2)
# Select the first two columns of the data
am92 <- am92durn2[,c(1,2)]
# Create a life table from the data
am92_lt <- new("lifetable",  x=am92[,1],lx=am92[,2],name=" am92 males")
# Create an actuarial table from the life table with an interest rate of 4%
am92_at <- new("actuarialtable",x=am92_lt@x, lx=am92_lt@lx,  interest=0.04, name="am92")
# Define a function to calculate the reserve at time t for a whole life policy
reserve_whole <- function(x,t) {
Axn(am92_at, x+t) - Axn(am92_at, x) / axn(am92_at, x) * axn(am92_at, x+t)
}
# Calculate the reserves for a whole life policy for a life aged 60 years over a term of 55 years
xz <- reserve_whole(60,seq(1,55))
# Define a function to calculate the reserve at time t for an endowment assurance policy
reserve_end_ass <- function(x,t,n) {
AExn(am92_at, x+t,n-t) - AExn(am92_at, x,n) / axn(am92_at, x,n) * axn(am92_at, x+t,n-t)
}
# Calculate the reserves for an endowment assurance policy for a life aged 60 years over a term of 10 years
endow_res <- NULL
for(ww in 1:11) {
endow_res[ww] <- reserve_end_ass(60,ww-1,10)
}
# Calculate the premium for a term assurance policy
premium_term <- Axn(am92_at, 60,10) / axn(am92_at, 60,10)
# Define a function to calculate the reserve at time t for a term assurance policy
reserve_term_ass <- function(x,t,n) {
Axn(am92_at, x+t,n-t) - premium_term * axn(am92_at, x+t,n-t)
}
# Calculate the reserves for a term assurance policy for a life aged 60 years over a term of 10 years
xzzz <- reserve_term_ass(60,seq(0,10),10)
# Plot the reserves for the whole life policy over time
plot(seq(1,55),xz,xlab="term",ylab="reserve",main="Whole life assurance")
# Plot the reserves for the endowment assurance policy over time
plot(seq(0,10),endow_res,xlab="term",ylab="reserve",main="Endowment assurance")
# Plot the reserves for the term assurance policy over time
plot(seq(0,10),xzzz,xlab="term",ylab="reserve",main="10 year term assurance")
# Load the required libraries
library(lifecontingencies)
library(moments)
library(tseries)
library(readxl)
# Read the AM92 mortality table from a CSV file
am92durn2 <- read.csv("D:/DEV WORK/R library/am92durn2.csv")
# Select the first two columns of the data
am92 <- am92durn2[,c(1,2)]
# Create a life table from the data
am92_lt <- new("lifetable",  x=am92[,1],lx=am92[,2],name=" am92 males")
# Create an actuarial table from the life table with an interest rate of 4%
am92_at <- new("actuarialtable",x=am92_lt@x, lx=am92_lt@lx,  interest=0.04, name="am92")
# Define a function to calculate the reserve at time t for a whole life policy
reserve_whole <- function(x,t) {
Axn(am92_at, x+t) - Axn(am92_at, x) / axn(am92_at, x) * axn(am92_at, x+t)
}
# Calculate the reserves for a whole life policy for a life aged 60 years over a term of 55 years
xz <- reserve_whole(60,seq(1,55))
xz
reserve_whole
# Load the required libraries
library(lifecontingencies)
library(moments)
library(tseries)
library(readxl)
# Read the AM92 mortality table from a CSV file
am92_data <- read.csv("D:/DEV WORK/R library/am92durn2.csv")
# View the data (only works in RStudio)
am92_data.head()
# Read the AM92 mortality table from a CSV file
am92_data <- read.csv("D:/DEV WORK/R library/am92durn2.csv")
# View the data (only works in RStudio)
am92_data.head()
# View the data (only works in RStudio)
head()
# View the data (only works in RStudio)
am92_data.head()
# View the data (only works in RStudio)
head(am92_data)
library(tseries)
library(readxl)
Diarrhoea_Incidence_Data <- read_excel("D:/DEV WORK/Data Science Library/ml-library/crude-oil-forecast/data/Diarrhoea_Incidence_Data.xlsx")
View(Diarrhoea_Incidence_Data)
library(forecast)
Diarrhoea_Data <- read_excel("D:/DEV WORK/Data Science Library/ml-library/crude-oil-forecast/data/Diarrhoea_Incidence_Data.xlsx")
Diarrhoea_Data
View(Diarrhoea_Data)
attach(Diarrhoea_Data)
??attach
ggplot2::Diarrhoea_Data
library(ggplot2)
install.packages("ggseasonplot")
plot.ts(Diarrhoea_Data)
DData<- ts(Diarrhoea_Data)
plot.ts(DData)
library(MannKendall)
install.packages("Mannkendall")
install.packages("Kendall")
library(Kendall)
SeasonalMannKendall(DData)
MannKendall(DData)
adf.test(DData)
?adf.test()
pacf(DData)
Pacf(DData)
acf(DData)
Acf(DData)
pp.test(DData)
auto.arima(DData)
data.frame(DData)
Df_Diarrhoea<-data.frame(DData)
Df_Diarrhoea
pp.test(Df_Diarrhoea$Diarrhoea.Incidences.Recorded)
adf.test(Df_Diarrhoea$Diarrhoea.Incidences.Recorded)
auto.arima(Df_Diarrhoea$Diarrhoea.Incidences.Recorded)
auto.arima(Df_Diarrhoea)
auto.arima(Df_Diarrhoea$Diarrhoea.Incidences.Recorded)
install.packages("welchADF")
library(welchADF)
install.packages("urca")
gc()
library(tseries)
library(forecast)
library(urca)
library(astsa)
# Load data
data_path <- "crude-oil-forecast/Modified Data.csv"  # Replace with your file path
data <- read.csv(data_path)
# Load data
data_path <- "D:\DEV WORK\Data Science Library\ml-library\crude-oil-forecast/Modified Data.csv"  # Replace with your file path
data <- read.csv(data_path)
str(data)
setwd("D:/DEV WORK/Data Science Library/ml-library/crude-oil-forecast")
# Load data
data_path <- "crude-oil-forecast/Modified Data.csv"  # Replace with your file path
data <- read.csv(data_path)
# Load data
data_path <- "Modified Data.csv"  # Replace with your file path
data <- read.csv(data_path)
str(data)
# Convert to time series
price_ts <- ts(data = data$Price, start = c(2002, 1), frequency = 12)
str(price_ts)
# Plot time series
plot(price_ts)
autoplot(price_ts)
# Decompose time series
plot(decompose(price_ts))
seasonplot(price_ts, col = 1:20, pch = 19)
# Test for stationarity
ndiffs(price_ts)
nsdiffs(price_ts)
hist(price_ts)
acf(price_ts)
pacf(price_ts)
adf_price <- adf.test(price_ts)
print(adf_price)
# Differencing data
differenced_price <- diff(price_ts)
adf_differenced <- adf.test(differenced_price)
# Autocorrelation of differenced data
acf2(differenced_price)
acf(differenced_price, lag = 300)
# Fit ARIMA model
model <- auto.arima(differenced_price, trace = T)
arima_model <- arima(differenced_price, order = c(1, 1, 0))
residuals <- residuals(model)
plot(residuals)
checkresiduals(model)
# Forecast
forecasted <- forecast(arima_model, h = 24)
plot(forecasted)
# Calculate slope and intercept
price_times <- as.numeric(time(price_ts))
price_values <- as.numeric(price_ts)
SSxx <- sum((price_times - mean(price_times)) * (price_times - mean(price_times)))
SSxy <- sum((price_values - mean(price_values)) * (price_times - mean(price_times)))
slope <- SSxy / SSxx
intercept <- mean(price_values) - slope * mean(price_times)
